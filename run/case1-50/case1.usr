c-----------------------------------------------------------------------
c  nek5000 user-file template
c
c  user specified routines:
c     - uservp  : variable properties
c     - userf   : local acceleration term for fluid
c     - userq   : local source term for scalars
c     - userbc  : boundary conditions
c     - useric  : initial conditions
c     - userchk : general purpose routine for checking errors etc.
c     - userqtl : thermal divergence for lowMach number flows 
c     - usrdat  : modify element vertices 
c     - usrdat2 : modify mesh coordinates
c     - usrdat3 : general purpose routine for initialization
c     
c-----------------------------------------------------------------------
      subroutine uservp(ix,iy,iz,eg) ! set variable properties

c      implicit none

      integer ix,iy,iz,eg
     
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      if (ifield .eq. 1) then
          utrans = 999.7026         ! kg/m3
          udiff  = 1.307e-3         ! Pa*s or  e3 cP
      else if (ifield .eq. 2) then
          utrans = 4.218e6         ! thermal properties
          udiff  = 0.58
c          if (y .lt. 0.75 .or. y .gt. 2.25) then
c              utrans = 0.0              ! for solid region
c              udiff  = 0.0
c          endif
      endif

c      utrans = 0.0
c      udiff  = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userf(ix,iy,iz,eg) ! set acceleration term
c
c     Note: this is an acceleration term, NOT a force!
c     Thus, ffx will subsequently be multiplied by rho(x,t).
c
c      implicit none

      integer ix,iy,iz,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e
c     e = gllel(eg)            !for parallel

      ffx = 0.0
      ffy = 0.0
      ffz = 0.0
c      ffy = temp               ! Hot goes up, cold goes down

      return
      end
c-----------------------------------------------------------------------
      subroutine userq(ix,iy,iz,eg) ! set source term

c      implicit none

      integer ix,iy,iz,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e
c     e = gllel(eg)            !for parallel

      qvol   = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc(ix,iy,iz,iside,eg) ! set up boundary conditions
c
c     NOTE ::: This subroutine MAY NOT be called by every process
c
c      implicit none

      integer ix,iy,iz,iside,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

c      if (cbc(iside,gllel(eg),ifield).eq.'v01')            !for parallel

      ux   = 0.5
      uy   = 0.0
      uz   = 0.0
      temp = 10.0
      flux = 1000.0

!     Following 3 lines for Newton cooling(BC:c)
c      hc   = 500
c      t    = 50.0
c      tinf = 0.0
!
 
      return
      end
c-----------------------------------------------------------------------
      subroutine useric(ix,iy,iz,eg) ! set up initial conditions

c      implicit none

      integer ix,iy,iz,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

c      iel = gllel(ieg)          !for parallel
      
      ux   = 0.5
      uy   = 0.0
      uz   = 0.0
      temp = 10.0             ! Celsius??


      return
      end
c-----------------------------------------------------------------------
      subroutine userchk()

c      implicit none

      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine userqtl ! Set thermal divergence

      call userqtl_scig 

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat()   ! This routine to modify element vertices

c      implicit none

      include 'SIZE'
      include 'TOTAL'
   
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2()  ! This routine to modify mesh coordinates

c      implicit none

      include 'SIZE'
      include 'TOTAL'

      REAL :: areaPipe, radPipe, vdotPipe
      
      pi = 4.d0*atan(1.d0)
      radPipe = 0.0050
      areaPipe = pi * radPipe**2
      vdotPipe = ux * areaPipe

      param(30) = 1              ! >0 --> properties set in uservp()
      param(54) = 1              ! x-direction
      param(55) = vdotPipe      ! volumetric flow rate

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3()

c      implicit none

      include 'SIZE'
      include 'TOTAL'

      return
      end
